# Nginx Server Configuration File
# http://nginx.org/en/docs/dirindex.html
#
# https://www.linode.com/docs/websites/nginx/configure-nginx-for-optimized-performance
# https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration
# https://www.nginx.com/blog/tuning-nginx/
# https://tweaked.io/guide/nginx/
# https://www.linode.com/docs/websites/nginx/how-to-configure-nginx

# Defines user and group credentials used by worker processes. 
# If group is omitted, a group whose name equals that of user is used.
# Run as a unique, less privileged user for security reasons.

user nginx nginx;

# Defines the number of NGINX worker processes (the default is 1). In most 
# cases, running one worker process per CPU core works well, and we recommend 
# setting this directive to auto to achieve that.
#
# @link https://www.nginx.com/blog/tuning-nginx/

worker_processes auto;

# The option worker_connections sets the maximum number of connections that 
# can be processed at one time by each worker process. By default, the worker 
# connection limit is 512, but many systems can handle more.
#
# You can also set use epoll, a scalable I/O event notification mechanism to 
# trigger on events and make sure that I/O is utilized to the best of its 
# ability.
#
# You can utilize multi_accept in order for a worker to accept all new 
# connections at one time.

events {

  worker_connections 1024;
  use epoll;
  multi_accept on;

}

# Defines where Nginx will write its master process ID, or PID. 
# The PID is used by the operating system to keep track of and 
# send signals to the Nginx process.
pid /var/run/nginx.pid;

http {

  # Hide nginx version information.
  server_tokens off;

  # How long to allow each connection to stay idle.
  # Longer values are better for each individual client, particularly for SSL,
  # but means that worker connections are tied up longer.
  # keepalive_timeout and keepalive_requests control the keep alive settings.
  keepalive_timeout 65;
  keepalive_requests 100000;
  
  # sendfile optimizes serving static files from the file system.
  sendfile on;
    
  # tcp_nodelay allows Nginx to make TCP send multiple buffers as individual 
  # packets.
  tcp_nodelay on;

  # tcp_nopush optimizes the amount of data sent down the wire at once by 
  # activating the TCP_CORK option within the TCP stack. TCP_CORK blocks the
  # data until the packet reaches the MSS, which is equal to the MTU minus the 
  # 40 or 60 bytes of the IP header.
  tcp_nopush on;

  # Include $http_x_forwarded_for within default format used in log files.
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # Log access to this file. This is only used when you don't override it on a 
  # server{} level.
  access_log /etc/nginx/logs/access.log main;

  # Log errors and warnings to this file. This is only used when you don't 
  # override it on a server{} level.
  error_log  /etc/nginx/logs/error.log warn;

  include mime.types;
  default_type application/octet-stream;

  # Enable gzip compression.
  gzip on;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and CPU usage, offering about
  # 75% reduction for most ASCII files (almost identical to level 9).
  gzip_comp_level 5;
  
  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length 256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;
    # text/html is always compressed by gzip module

  # This should be turned on if you are going to have pre-compressed copies 
  # (.gz) of static files available. If not it should be left off as it will 
  # cause extra I/O for the check. It is best if you enable this in a 
  # location{} block for a specific directory, or on an individual server{} 
  # level.
  # gzip_static on;

  # Include files in the sites-enabled folder. server{} configuration files 
  # should be placed in the sites-available folder, and then the configuration 
  # should be enabled by creating a symlink to it in the sites-enabled folder.
  include /etc/nginx/sites-enabled/*;

}